#!/bin/bash
#
# A script to make a branch and tag in a repository with tag description
# for contributions to OpenVnmrJ
#
# Copyright 2016 Tim Burrow
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
set -o nounset
#set -e

function showhelp {
    cat <<-%
Thank you for contributing to OpenVnmrJ!
This macro will create your submission and is for
any contribution to OpenVnmrJ. 

Usage: `basename $0` [OPTIONS]
or     `basename $0` -h

Options
=======
    -r
      Repository to use, if not specified, uses appdirs 
    -n
      Name of contribution *required*
    -b
      branch to use. By default the development (unstable) branch is used. See below.
    -p
      Path to directory containing contribution *required*
    -u
      Github user name, *required* 
    -t
      tag for version of software. e.g. 1.0 or 0.9; 1.0 is default
    -h
      Show this help and exits
    -H|--https)
      Use https URL. The default is ssh.
    -v
    	Verbose TODO nothing yet

License
=======
All submissions must be licensed under the Apachev2 license, which can be
read at http://www.apache.org/licenses/LICENSE-2.0.html
Additionally, a Contributor License Agreement must be completed prior to a
pull-request to the OpenVnmrJ repository, giving the University of Oregon 
rights to use and diestribute your contributions. A copy may be read at
https://gist.github.com/ekpaulson/73530dfe735fa54d81fa

Repositories
============
The repository by default is "appdirs" which contains a directory for each user
contributed appdir. This appdir is "openvnmrj-utils" in the appdirs repository.

Instructions
============
If you have not done so, fork https://github.com/OpenVnmrJ/appdirs.git on GitHub. 
You will need a free GitHub account, then click on the "Fork" icon on the top right
of the repository. See https://help.github.com/articles/fork-a-repo/ for more
information.

Branches
========
Use either the "development" branch or your own branch to submit your contribution.
If you used a branch other than development, specify it using the -b switch.

Submitting
==========
Make a fork of the OpenVnmrJ repository on GitHub.com

On your OpenVnmrJ computer:
1. Make a directory with the name of your submission. Let's call it "mysub". 
   The name must not have any spaces or special characters.
2. Make subdirectories maclib, manual, etc inside this directory mysub
3. Put your maclib files in maclib and the corresponding manual files into manual
4. Make a file called description, with a text based description of your contribution.
5. Make a file called title with a nicer name of the contribution.
6. Copy the Apache License file into the directory. It must named "LICENSE"

You will have:
mysub----maclib--macro files
.......|-manual--manual files
.......|-psglib--pulse sequences (.c files)
.......|-bin--executables
.......|-[etc]--other files
.......|-LICENSE
.......|-description
.......|-title

In this example, run the script like:
./submitcontribution -r pathto/mysub -name mysub -u your-github-name

This script will clone your fork, check your files, then add them to the repository.
Finally, the repository will be pushed to GitHub using your credientials.

When your contribution is in your fork on GitHub, make a pull request by going to 
your repository on GitHub

See http://openvnmrj.org for more information or help.

BUGS
====
Check the TODOs in the script

%
}

function badrepo() {
  cat <<-%%
Cannot access the repository ${1} 

Check that the URL above is correct and you have correct permissions.
If the URL starts with ssh, check this website:
https://help.github.com/articles/generating-ssh-keys/ 
%%
}


# function that returns the description from a file passed as $1
function _description {
local tdescription
gobble=0
while read -r line; do 
  if [ ${gobble} -eq 0 ]; then
    if [ $(expr "${line}" : "^Description:[ ].*$") -gt 0 ]; then 
        gobble=1
        tdescription=$(expr "${line}" : "^Description:[ ]*\(.*\)$") 
        continue
    fi  
  else
    if [ -z "${line}" ]; then ## empty line
        gobble=0
        continue
    else
#       echo "!${line}"
       tdescription+=" ";
       tdescription+=${line}
       continue
    fi  
  fi  
done < "$1"
description=$(echo "${tdescription}"| fmt -s -w 72)
}

# function to see if array contains a string
function contains() {
  local e
  for e in "${@:2}"; do [[ "${e}" == "${1}" ]] && return 0; done 
  return 1;
}


# this is the version tag on the repository, not the version of this script
version="1.0"
useHTTPS=0
newbranchmade=0
verbose=0
repo=appdirs

if [[ ! -z ${vnmruser:-} ]]; then
  ovjhome=${vnmruser}/openvnmrj
else
  ovjhome=~/vnmrsys/openvnmrj
fi

if [[ $? != 0 ]] ; then showhelp; exit 1 ; fi

while getopts “b:r:p:u:v:hHt:” option; do

  case "$1" in
  	b)
  		# branch to use, if not specified, uses development
  		localbranch=${OPTARG}
      ;; 
    r)
      # repository to use, if not specified, uses appdirs 
      repo=${OPTARG}
      ;;
    p)
      #  path to directory containing contribution *required*
      dirpath=${OPTARG}
      ;;
    u)
      # github user name, *required*
      githubuser=${OPTARG}
      ;;
    t)
      # tag version of software. e.g. 1.0 or 0.9. 1.0 is default
      version=${OPTARG}
      ;;
    h)
      # show this help and exits
      showhelp; exit 0 
      ;;
    H)
      # use https URL. The default is ssh.
      useHTTPS=1
      ;;
  	v)
  		# verbose
  		verbose=1
      ;;     
    /?) 
    	echo -e "Invalid option: ${option}\n" 1>&2
    	exit 85 
    	;;
  esac
done

# check inputs are good
if [[ -z ${githubuser:-} ]]; then
  echo -e "Missing GITHUBUSER!\n"
  showhelp
  exit 85
fi

if [[ -z ${dirpath:-} ]]; then
  echo -e "Missing one of path to directory!\n"
  showhelp
  exit 85
fi

API_URL="https://api.github.com/users/${githubuser}/repos?type=owner"
repos=($(curl -s "$API_URL" | grep -Eo '"git_url": "[^"]+"' | awk '{print $2}' | awk -F"/" '{print $NF}' | sed 's/\.git"//'))

contains "${repo}" "${repos[@]}" || { echo -e "Cannot find ${repo} in list\n${repos[@]}"; showhelp ; exit 1; }

if [[ "OpenVnmrJ" ==  $githubuser ]]; then
  echo "Please fork the OpenVnmrJ repository on GitHub"
  exit 1
fi

# check if directory is base of directory we want? Or names of dir and contribution match?  TODO
if [[ ! -d $dirpath ]]; then
  echo "Directory ${dirpath} not found"
  exit 1
fi

if [[ ! -d "${dirpath}"/maclib ]]; then
  echo "Warning: directory ${dirpath}/maclib not found"
fi

if [[ ! -f "${dirpath}"/description ]]; then
  echo "description file not found within ${dirpath}"
  exit 1
fi

if [[ ! -f "${dirpath}"/title ]]; then
  echo "title file not found within ${dirpath}"
  exit 1
fi

if [[ ! -f "${dirpath}"/LICENSE ]]; then
  echo "Warning: Apache license not found within ${dirpath}"
fi

# TODO check name and directory name match (watch for substring matching)
# TODO check if dirpath is in a git repo? User could have cloned already...
# TESTING URL TODO change to github
if (( useHTTPS == 0 )); then
  repo_url="ssh://git@github.com:22/${githubuser}/${repo}.git"
  upstream_repo_url="ssh://git@github.com:22//OpenVnmrJ/${repo}.git"
else
  repo_url="https://github.com/${githubuser}/${repo}.git"
  upstream_repo_url="https://github.com/OpenVnmrJ/${repo}.git"
fi

# Checking done, we'll clone the forked repo
localbranch="development"

# note I'm putting a v in front of the version
newtag="${name}-v${version}"

if [[ ! -d ${dirpath} ]]; then
	echo "Directory ${dirpath} missing!"
	exit 1
fi

# check state of directory; it is a clone of appdirs?
cd ${dirpath}
if [[ $(git rev-parse --is-inside-work-tree 2>/dev/null) == "true"]]; then
	# we are inside a git repository; perhaps an appdir clone?
	# TODO check if a fork of appdirs, if so push?
fi



if [[ ! -d "${ovjhome}" ]]; then
	echo "Making OpenVnmrJ directory at ${ovjhome}"
	mkdir -p "${ovjhome}" || { echo "mkdir ${ovjhome} failed. Aborting"; exit 1; }
fi  
cd "${ovjhome}" || { echo "cd ${ovjhome} failed. Aborting"; exit 1; }

# Clone the forked appdir in a new (hidden directory)
repodir="${ovjhome}/.${repo}-${localbranch}"
if [[ -d "${repodir}" ]]; then
	rm -rf "${repodir}"
fi

echo "Cloning repository from ${repo_url} into ${repodir}"
git clone ${repo_url} ${repodir} || { badrepo "${repo_url}"; exit 1; }
cd "${repodir}"
git fetch --all
git fetch --tags

# check if the branch aready exists
git show-ref --verify refs/heads/"${newbranch}"
if [[ $? != 0 ]]; then
  echo "checking out new branch ${newbranch}"
  git checkout -b ${newbranch} || { echo "Making branch ${newbranch} failed. Aborting"; exit 1; }
  newbranchmade=1
else
	git checkout  ${newbranch} || { "Making branch ${newbranch} failed. Aborting"; exit 1; }
	newbranchmade=0 
fi

# TODO some diagnostics
git remote -v
git tag -l

# at this point we can copy the directory to our hidden repo
#
cp -a "${dirpath}" "${repodir}"

# sign our commit and tag if possible
gitsignkey=$(git config --global --get user.signingkey)
if [[ -z ${gitsignkey} ]]; then
  tagswitch="-a"
  commitswitch="-m"
else
  tagswitch="-s"
  commitswitch="-S -m"
fi
title=$(cat "${dirpath}/title")
description=$(cat "${dirpath}/description")

if [[ ! "${dirpath}"/README.md ]]; then
	cat  >> README.md <<-%
##${title} 

>${description}

%

fi

reponame=$(basename ${dirpath})

git add "${reponame}
echo "git commit ${commitswitch} ${reponame} -m ${title}"
git commit ${commitswitch} "${name} -m ${title}" || { echo "git commit could not be made. Please look at the error message"; exit 1; }

#git tag ${tagswitch} "${newtag}" -m "${description}"

if (( $newbranchmade == 1 )); then
  echo "git push --set-upstream origin ${newbranch}"
  git push --set-upstream origin ${newbranch} \
        || { echo "git push branch could not be made. Please look at the error message"; exit 1; }
fi
git push || { echo "git push could not be made. Please look at the error message"; exit 1; } 
git push --tags

cat<<-%

A branch ${newbranch} has been pushed into the
repository at ${repo_url}

Please go to github to open a pull request!
Thank you for contributing to OpenVnmJ.

If you have any questions, check out
http://openvnmrj.org/

%

exit 0


# repo probably exists already, just update
  cd "${repodir}" || { echo "cd ${repodir} failed. Aborting"; exit 1; }
  if [[ -d .git ]]; then
    echo "Updating repository from ${repo_url}"
    git checkout master
    git pull origin || { badrepo "${repo_url}"; exit 1; }
    git fetch --all
# check if the branch aready exists
    git show-ref --verify refs/heads/"${newbranch}"
    #git show-ref --verify --quiet refs/heads/"${newbranch}"
    if [[ $? != 0 ]]; then
      echo "checking out new branch ${newbranch}"
      git checkout ${gitcheckout} ${newbranch}
      newbranchmade=1
    else
      # this means the branch ALREADY EXISTS and this is not a new contribution
      if [[ version == "1.0" ]]; then
        echo "This contribution is not new; provide a version number and try again"
        exit 1
      fi
      #git show-ref --verify --quiet refs/tags/"${newtag}"
      git show-ref --verify refs/tags/"${newtag}"
      if [[ $? == 0 ]]; then
        echo "The tag ${newtag} already exists; provide a new (greater) version number and try again"
        exit 1
      fi
# we want to switch to master or stash if headless
      if branch=$(git symbolic-ref --short -q HEAD); then
        echo on branch $branch
        if [[ $branch != "master" ]]; then
          git checkout master
        fi
      else
        echo not on any branch; will stash, but only not with old git
        if [[ ${gitcheckout} != "-b" ]]; then
          git stash
        fi
        git checkout master
      fi
      echo "checking out old branch ${newbranch}"
      git checkout ${newbranch}
    fi  
  fi  
else # fresh repo pulled
